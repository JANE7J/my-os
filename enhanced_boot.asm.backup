; Enhanced bootloader that loads a C kernel
; This bootloader will load our compiled C kernel from disk

[BITS 16]
[ORG 0x7C00]

KERNEL_OFFSET equ 0x1000    ; Load kernel at this address

start:
    ; Set up segments
    mov [BOOT_DRIVE], dl    ; BIOS sets dl to boot drive
    xor ax, ax
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov sp, 0x9000          ; Set stack away from our code

    ; Print loading message
    mov si, msg_loading
    call print_string_16

    ; Load kernel from disk
    call load_kernel

    ; Enter protected mode
    call switch_to_pm

print_string_16:
    mov ah, 0x0E
.loop:
    lodsb
    test al, al
    jz .done
    int 0x10
    jmp .loop
.done:
    ret

load_kernel:
    mov si, msg_loading_kernel
    call print_string_16

    ; Read kernel from disk (simplified - assumes kernel is in sector 2)
    mov bx, KERNEL_OFFSET   ; Destination
    mov dh, 0               ; Head 0
    mov dl, [BOOT_DRIVE]    ; Drive
    mov ch, 0               ; Cylinder 0
    mov cl, 2               ; Start from sector 2
    mov al, 15              ; Read 15 sectors (should be enough for our kernel)
    mov ah, 0x02            ; Read function
    int 0x13                ; BIOS interrupt

    jc disk_error           ; Jump if error

    mov si, msg_kernel_loaded
    call print_string_16
    ret

disk_error:
    mov si, msg_disk_error
    call print_string_16
    jmp $                   ; Hang

switch_to_pm:
    cli                     ; Disable interrupts
    lgdt [gdt_descriptor]   ; Load GDT

    ; Enter protected mode
    mov eax, cr0
    or eax, 1
    mov cr0, eax

    ; Jump to 32-bit code
    jmp CODE_SEG:init_pm

; Messages
msg_loading db 'MyOS Bootloader Starting...', 13, 10, 0
msg_loading_kernel db 'Loading C kernel from disk...', 13, 10, 0
msg_kernel_loaded db 'Kernel loaded! Switching to 32-bit mode...', 13, 10, 0
msg_disk_error db 'Disk read error!', 13, 10, 0

BOOT_DRIVE db 0

; GDT
gdt_start:
    ; Null descriptor
    dd 0x0, 0x0

    ; Code segment
    dw 0xFFFF       ; Limit low
    dw 0x0          ; Base low
    db 0x0          ; Base middle
    db 10011010b    ; Access
    db 11001111b    ; Flags + Limit high
    db 0x0          ; Base high

    ; Data segment
    dw 0xFFFF       ; Limit low
    dw 0x0          ; Base low
    db 0x0          ; Base middle
    db 10010010b    ; Access
    db 11001111b    ; Flags + Limit high
    db 0x0          ; Base high

gdt_end:

gdt_descriptor:
    dw gdt_end - gdt_start - 1
    dd gdt_start

CODE_SEG equ gdt_start + 0x8
DATA_SEG equ gdt_start + 0x10

[BITS 32]
init_pm:
    ; Set up 32-bit segments
    mov ax, DATA_SEG
    mov ds, ax
    mov ss, ax
    mov es, ax
    mov fs, ax
    mov gs, ax

    ; Set up stack
    mov ebp, 0x90000
    mov esp, ebp

    ; Display transition message
    mov edi, 0xB8000
    mov esi, msg_32bit
    mov ah, 0x0F
.loop:
    lodsb
    test al, al
    jz .done
    mov [edi], ax
    add edi, 2
    jmp .loop
.done:

    ; Jump to C kernel
    call KERNEL_OFFSET

    ; If kernel returns (shouldn't happen), halt
    hlt

msg_32bit db 'Entered 32-bit mode! Calling C kernel...', 0

; Pad to 510 bytes and add boot signature
times 510-($-$$) db 0
dw 0xAA55
